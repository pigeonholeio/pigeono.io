{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sending secrets securely","text":"<p>Make an impact on social media and increase engagement</p>"},{"location":"quick-start/","title":"Getting started","text":"<p>Pigeonhole is a simple yet super-secure cli tool to transfer secrets and is entirely built for those who live and are familiar with the command-line.</p>"},{"location":"quick-start/#installation","title":"Installation","text":"<p>Binaries are distributed directly and via several package managers.</p> Operating System Description  MacOS Brew, Shell  Linux Brew, Shell  Windows WinGet, WinGet, Shell  General Raw Binaries <p>Request a new Package Manager</p> <p>Raise a [FEATURE REQUEST] to add support for another package manager - which package manager do you use?</p>"},{"location":"quick-start/#macos","title":"MacOS","text":"<p>Install Brew if you haven't already.</p>  Brew Shell (Bash) <pre><code>brew install pigeonholeio/pigeonhole/pigeonhole-cli\n</code></pre> <p>The below script will work out which architecture your machine runs on and will download the relevant binary and will attempt to install it to <code>/usr/local/bin</code> with sudo. <pre><code>/bin/bash -c \"$(curl -fsSL https://pigeono.io/assets/install.sh)\"\n</code></pre></p> <p>Find a full list of releases below in the Manual Download section.</p>"},{"location":"quick-start/#linux","title":"Linux","text":"Brew Shell (Bash) <p>Install Brew on Linux?</p> <p>Yes you can! Go ahead and give Brew a try on Linux - it just doesn't support casks.    </p> <pre><code>brew install pigeonholeio/pigeonhole/pigeonhole-cli\n</code></pre> <p>The below script will work out which architecture your machine runs on and will download the relevant binary and will attempt to install it to <code>/usr/local/bin</code> with sudo. <pre><code>/bin/bash -c \"$(curl -fsSL https://pigeono.io/assets/install.sh)\"\n</code></pre></p> <p>Find a full list of releases below in the Manual Download section.</p>"},{"location":"quick-start/#windows","title":"Windows","text":"WinGet Terminal (PowerShell) Manual Install <p>Work in Progress</p> <p>I'm currently working on a Winget and PowerShell installer. They should be here soon!</p> <p>Coming soon</p> <p>I'm currently working on the Windows installers. They should be here soon!</p> <p>Find the Windows binaries are hosted and accessbile directly on the Releases page.</p> <p>Work in Progress</p> <p>I'm currently working on a Winget and PowerShell installer. They should be here soon!</p>"},{"location":"quick-start/#manual-download","title":"Manual / Download","text":"<p>You can obtain the binaries for your platform and architecture by visiting Releases.    </p> <ol> <li>Visit the Releases page, find the latest release and download the binary for your architecture</li> <li>Place the binary in a location that is in your <code>$PATH</code> environment variable</li> <li>You should now be able to run <code>pigeonhole login</code> from the command-line</li> </ol>"},{"location":"quick-start/#cli-auto-completion-script","title":"CLI Auto-Completion Script","text":"<p>It's handy to have the shell auto-completion installed for your shell to make using cli tools easier.  To find out what shells are supported, run the following in your terminal. <pre><code>pigeonhole completion\n</code></pre> Then run the command relevant for your shell e.g. Take ZSH as an example. Add the completion script output to your ZSH Profile: <pre><code>pigeonhole completion zsh &gt;&gt; ~/.zshrc\nsource ~/.zshrd\n</code></pre></p>"},{"location":"quick-start/#sign-in","title":"Sign In","text":"<p>Signing into the cli tool is straight forward using your Identity Provider.</p> Tip - Request a new Identity Provider Support <p>Only Microsoft Azure is currently supported. Raise a [FEATURE REQUEST] Identity Provider GitHub issue to add support for your Identity Provider.    </p> <p>Simply run; <pre><code>pigeonhole login\n</code></pre> The tool will prompt to you, follow the instructions then it will generate GPG keys for you if you haven't got them created.</p>"},{"location":"quick-start/#send-your-first-secret","title":"Send your first secret","text":"<p>Simply, specify the <code>recipient</code> and <code>filepath</code> and that's it! <pre><code>pigeonhole secrets send --recipient user@domain.com --filepath ./somefile\n</code></pre></p>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":"<p>Follow the Managing Secrets section to find out more about managing secretes like;   - Listing   - Downloading   - Deleting   - Send and pipe from stdin</p>"},{"location":"security/","title":"High Level Architecture Design","text":""},{"location":"security/#authentication","title":"Authentication","text":"<p>PigeonHole does not store any username/passwords for authentication by design. From the very beginning PigeonHole requires you to authenticate through a third-party Identity Provider like Microsoft (Azure) and Google.</p>"},{"location":"security/#secret-multi-factor-authentication-mfa","title":"Secret Multi-factor Authentication (MFA)","text":"<p>PigeonHole adds MFA on at a secret level. This means when you share a secret with a recipient, you can enable the secret to challenge for an MFA code before it is downloaded by the client.</p> <p>This is achieved through the industry-standard TOTP algorithm.</p>"},{"location":"security/#data-encryption","title":"Data Encryption","text":"<p>All data is encrypted on the sender's workstation and only decrypted at the recipient's workstation.</p>"},{"location":"security/#data-integrity","title":"Data Integrity","text":"<p>OpenPGP checksums and signatures are created prior to encrypting and verified at the recipient's workstation once retrieved and decrypted. Should the integrity fail the files would be shredded and the download process retried.</p>"},{"location":"security/#secure-file-shredding","title":"Secure File Shredding","text":"<p>Should the sender or recipient require the file to irretrievable (even through data recovery techniques), the file shredding feature will first write randomly-generated bytes at a block level then delete the file.</p>"},{"location":"security/#encryption-keys","title":"Encryption Keys","text":""},{"location":"security/#location","title":"Location","text":"<p>All the private encryption keys are kept on the sender's machine and there are no master keys on our servers - even encrypted ones! This means PigeonHole cannot decrypt or intercept raw content. PigeonHole only has senders' public keys which are completely safe to share.</p> <p>Keys are stored in sender's workstation system keyring services;    1. Windows - Windows Credential Store   2. Linux - Secret Service dbus interface (provided by GNOME Keyring)   3. MacOS - Keychain    </p>"},{"location":"security/#inspection","title":"Inspection","text":"<p>If users wish they can inspect their own keys using standard GPG tooling.</p> <p>Note: The PEM formatted keys are base16 encoded to avoid particular corruption scenarios.</p>"},{"location":"security/#rotation","title":"Rotation","text":"<p>Users can rotate and upload new keys at any point by performing <code>pigeonhole keys rotate</code>.</p>"},{"location":"security/#public-keys","title":"Public Keys","text":"<p>OpenPGP public keys are created on each user's workstation using the email address provided by their Identity Provider (IdP).</p>"},{"location":"security/#file-encryption","title":"File Encryption","text":"<p>Behind the scenes PigeonHole uses the OpenPGP library maintained by ProtonMail to achieve secret sharing you can trust - there is never any man-in-the-middle!</p> <p>File encryption and decryption always happens within the sender/recipient's command-line.</p>"},{"location":"about/getinvolved/","title":"How you can help","text":"<p>\ud83d\ude80\ud83e\udef6 Thanks for your interest in supporting the project! \ud83e\udef6 \ud83d\ude80</p> <p>The project is in its infancy so any help is greatly appreciated. Your involvement keeps the gears turning and gives me the motivation to maintain the service. Here's how you can make an impact:</p>"},{"location":"about/getinvolved/#easy-wins","title":"Easy Wins \ud83c\udf89","text":"<p>Sometimes, the smallest actions make the biggest difference!</p>"},{"location":"about/getinvolved/#star-the-project-on-github","title":"\u2b50 Star the project on GitHub","text":"<p>A simple star shows your love for the project and boosts visibility. It\u2019s like giving us a virtual high-five!</p> <p>All you have to do is head over to github.com/pigeonholeio/pigeonhole-cli, make sure you're logged in and star it in the top right-hand corner \ud83d\udc4d</p>"},{"location":"about/getinvolved/#follow-on-x-twitter","title":"Follow on X (Twitter)","text":"<p>Head over to x.com/pigeonholeio and click follow.</p>"},{"location":"about/getinvolved/#buy-me-a-beer","title":"\ud83c\udf7a Buy Me a Beer","text":"<p>I like beer and it is a Welshman's currency - developing, maintain and paying the AWS costs takes time, energy and money. You can fuel my coding sessions by buying me a beer.</p>"},{"location":"about/getinvolved/#send-a-secret","title":"\ud83d\udce8 Send a Secret","text":"<p>Sending a secret using the tool is as simple as it gets. Simply using the tool increases my motivation and validates the service to keep it going</p>"},{"location":"about/getinvolved/#found-a-bug-lets-squash-it","title":"Found a Bug? Let's Squash It! \ud83d\udc1b","text":"<p>Think you've spotted a glitch? Found something that doesn't quite work right? Let\u2019s fix it together!</p> <p>How to Report:   Head to our GitHub Issues page and describe the bug. Be sure to include:   - Steps to reproduce the issue   - What you expected vs. what happened   - Any relevant error messages or logs    </p> <p>Every bug report helps make PigeonHole better, and you get eternal gratitude in return and perhaps some free swag!</p>"},{"location":"about/getinvolved/#got-feedback","title":"Got Feedback?","text":"<p>I'm all ears!  </p> <p>\ud83d\udcbb Code Feedback: - Have tips or ideas for improving our code? - Know of a library I should check out? Drop your suggestions on GitHub Issues!  </p> <p>\ud83d\udd75\ufe0f Identity Provider Requests: - I want to support the services you use. Is it Google? Okta? Keycloak? Let us know what to prioritize next.  </p> <p>\u2754 General Feedback: - Love the tool? - Want to suggest a feature? Email me at feedback@pigeono.io. I read every message - I value your feedback, input and advice!  </p>"},{"location":"about/getinvolved/#contribute-to-the-code","title":"Contribute to the Code \ud83d\udcbb","text":"<p>Are you a coder looking to make an impact? I welcome pull requests with open arms!  </p> <p>How to Contribute: - Check out our Contributing Guide  - Submit your pull request with a clear explanation of your changes     </p> <p>I'll help you get your work merged and celebrated!    </p>"},{"location":"about/getinvolved/#feature-requests","title":"Feature Requests \ud83d\udee0\ufe0f","text":"<p>Do you dream of a feature that would make PigeonHole even better?  </p> <p>Tell Me About It:  - Submit your feature requests via GitHub Issues. The more details, the better!     </p> <p>Vote on Features:  - Check out requests submitted by others and upvote your favorites. I want to build what matters most to you.     </p>"},{"location":"about/getinvolved/#review-pigeonhole","title":"Review PigeonHole \ud83d\udcdd","text":"<p>Find using PigeonHole easy and straight forward? Share your experience!  </p> <ul> <li>Write a quick review or testimonial to let others know why you like it     </li> <li>Post about PigeonHole on forums, blogs, or social media to spread the word    </li> </ul> <p>No matter how you choose to get involved, your support means the world \ud83c\udf0d\ud83d\udc99 Let\u2019s build something amazing, together \ud83d\ude80  </p>"},{"location":"about/introduction/","title":"About PigeonHole","text":""},{"location":"about/introduction/#the-problem-statement","title":"The Problem Statement","text":"<p>As I said above, I learn by doing.    </p> <p>Over the course of my career, quite often I continuously find myself wanting to send passwords, config files or even certificate private keys to colleagues or third parties etc. quickly, easily and most importantly not compromise data security.</p> <p>Yes, Secrets like passwords can be copied and pasted into chat services like MS Teams or Slack but are they really trusted?</p> <p>Every security engineer will lean towards OpenPGP and GPG in nature and it solves the problem. However, the problem is a lot of people aren't aware of it let alone have got the cli tool installed nor GPG keys configured.</p> <p>There are a lot of tools out there solving this problem already. Ones that I even use i.e. Keybase but they require - Accounts to be set up - Require recipients to already be a member and send you their public key - GUI based apps - GPG keys generated with no real way to provide trust nor tie to an online identity</p> <p>As an engineer that works primarily with an IDE and in the terminal, context switching out of this is too much. I then thought how would I do it and then the realisation of marrying this idea with wanting to learn Go was born.</p>"},{"location":"about/introduction/#the-idea","title":"The Idea","text":"<p>I am a DevSecOps Engineer, platform engineer, Solution and Technical Security Architect and I love dabbling around on the command line with new tech.   I learn by experimentation and seeing things in action - better yet, I enjoy playing with tech and at some point over the last few years I had a new goal - learn Golang.</p>"},{"location":"about/introduction/#requirements","title":"Requirements","text":"<p>So I set out on a journey; I found </p>"},{"location":"architecture/deep-dive/","title":"Architecture Deep Dive","text":"<p>The architecture is designed with Zero Trust at the forefront with its End-to-End Encryption.</p>"},{"location":"architecture/deep-dive/#key-management-service","title":"Key Management Service","text":"<p>The Key Management Service (KMS) service is provided by AWS leveraging Customer Managed Keys to generate data cipher keys.</p>"},{"location":"architecture/deep-dive/#always-client-side-data-encryption","title":"Always Client-Side Data Encryption","text":"<p>By default, encryption and decryption of data always happens</p>"},{"location":"architecture/self-hosted/","title":"Self-Hosted Install","text":"<p>Self-hosting PigeonHole has been a core design goal from day one. Every line of code, every technology choice, and every configurable option was carefully selected to make running your own instance not just possible \u2014 but smooth and flexible.</p> <p>The tool and API are built to integrate seamlessly with your existing infrastructure, leveraging interoperable services and standards to ensure maximum adaptability.</p> <p>That said, supporting a self-hosted version alongside the online service is a significant commitment. At this time, I'm unable to provide official support or SLA guarantees for self-hosted deployments.</p> <p>However, if you're interested, please reach out. Depending on demand and use case, I'm open to exploring tailored options on a case-by-case basis. Your feedback could be the catalyst to making self-hosted PigeonHole a fully supported reality.</p>"},{"location":"architecture/sso/","title":"Enterprise Authentication out of the box","text":"<p>PigeonHole, like any other Enterprise app, is designed to use an Identity Provider.    </p> <p>PigeonHole leverages OpenID Connect to externalise the authentication and credential handling. This provides a cryptographic chain of trust where PigeonHole ties a users email address (their identity) to a cryptographic public key.   Following this model ensures if you send a secret to a particular email address, only that person can decrypt it. With only GPG, you can't infer this trust.</p>"},{"location":"architecture/sso/#supported-identity-providers","title":"Supported Identity Providers","text":"<p>Currently only Microsoft Azure is supported.    </p> <p>However, any compliant OpenID Connect (OIDC) Identity Provider is supportable.   Raise a [FEATURE REQUEST] Identity Provider to enable it.</p> <p>There is a plan to support the following however it is based on demand;   - Okta   - Google   - Keycloak    </p>"},{"location":"architecture/transient-keys/","title":"Ephemeral & Transient Keys","text":"<p>The Transient Key feature in PigeonHole provides a secure, temporary encryption mechanism for sending secrets to recipients who have not yet registered their permanent public key bridging the gap between usability and zero-trust security.   </p> <p>Tip</p> <p>For the best experience (and to minimise use of ephemeral keys), recipients should sign in to PigeonHole before you send them a secret.</p>"},{"location":"architecture/transient-keys/#overview","title":"Overview","text":"<p>By default, when a user's public key is known to PigeonHole, it is used for encryption.</p> <p>When sending a secret to a recipient not yet known to PigeonHole, an ephemeral (transient) key is used instead. These keys are dynamically generated and replaced with the recipient's permanent public key once they sign in for the first time. At that point, PigeonHole securely re-encrypts the data with the new key.</p> <p>Multiple safeguards are in-place ensuring the security of the Transient Key feature \u2014 even from PigeonHole itself.</p> <p>The transient key process is seamless and secure:</p> <ol> <li>Keys are securely generated and anonymised.</li> <li>Data is encrypted client-side with an ephemeral public key.</li> <li>The recipient signs in and uploads their permanent public key.</li> <li>PigeonHole re-encrypts the data with the new key.</li> <li>The recipient is notified that their secret is ready to download.</li> </ol> <p>If you know a more secure approach, we\u2019d love to hear from you.</p>"},{"location":"architecture/transient-keys/#deep-dive","title":"Deep Dive","text":""},{"location":"architecture/transient-keys/#secure-key-generation","title":"Secure Key Generation","text":"<ul> <li>Keys are generated in-memory on dedicated, isolated hosts.  </li> <li>An ephemeral key is created using the GnuPG library.  </li> <li>The key is encrypted using a KMS service, anonymised, and stored without any reference to the user or secret.  </li> <li>This key is retained until the recipient signs in.  </li> <li>Generation typically takes a few seconds.</li> </ul> <p>Note</p> <p>Transient keys are stored using a randomly generated GUID as the filename, ensuring no user or secret metadata is exposed.</p>"},{"location":"architecture/transient-keys/#client-side-data-encryption","title":"Client-Side Data Encryption","text":"<ul> <li>The ephemeral public key is transmitted back to the sender\u2019s client.  </li> <li>The sender\u2019s client encrypts the data locally, on behalf of the intended recipient.  </li> <li>The encrypted data is then pushed to PigeonHole\u2019s secure storage.  </li> </ul> <p>Info</p> <p>Recipients receive an email notification with instructions on signing in to retrieve the secret.</p>"},{"location":"architecture/transient-keys/#key-rotation-process","title":"Key Rotation Process","text":"<p>Once the recipient signs in and uploads their permanent public key, the system:</p> <ol> <li>Downloads the encrypted data into a secure environment.  </li> <li>Decrypts it in-memory, then re-encrypts it with the new key.  </li> <li>Stores the newly encrypted data back in secure storage.  </li> <li>Notifies the recipient that their secret is ready.</li> </ol>"},{"location":"architecture/transient-keys/#separation-of-concerns","title":"Separation of Concerns","text":"<p>In addition to the safeguards provided by PigeonHole's distributed architecture, transient keys are further protected by using randomly generated GUIDs. These identifiers are virtually impossible to link back to the encrypted senders, recipients nor secrets they protect.</p>"},{"location":"architecture/transient-keys/#strict-storage-policies","title":"Strict Storage Policies","text":"<p>Access to storage is tightly controlled. Only services that explicitly require it are granted permissions, with read/write rights restricted to specific storage paths at a granular level.</p>"},{"location":"documentation/configuration/authentication/","title":"Single Sign-On &amp; Authentication","text":""},{"location":"documentation/configuration/authentication/#overview","title":"Overview","text":"<p>PigeonHole authentication is designed to be as seamless as possible while also keeping the service secure. The best way to achieve this is to provide Single Sign-On (SSO) as standard with no username/passwords stored in PigeonHole.</p> <p>SSO is extremely important and therefore at the heart of PigeonHole.</p>"},{"location":"documentation/configuration/authentication/#authentication-flow","title":"Authentication Flow","text":"<p>PigeonHole uses standard OAuth/OpenID Connect authentication flows: </p> <ol> <li>User initiates the login process via the command-line <code>pigeonhole login azure</code>. A browser tab is opened and the cli opens a port and listens for the browser response</li> <li>The PigeonHole API returns a 302 response directing the user to default Azure AD Application</li> <li>The user logs into and approves the application</li> <li>The browser is directed to a PigeonHole API endpoint</li> <li>Carrying the OAuth <code>authorization code</code> the browser hits the Azure PigeonHole API callback endpoint</li> <li>The PigeonHole API service calls out to the identity provider exchanging the short-lived <code>auth code</code> for an ID and Access token.</li> <li>On successful validation of the <code>auth code</code> the Identity Provider issues an Identity Provider Id and Access Token</li> <li>Information from the IdP tokens is added to the claims on the PigeonHole-issued JWT token</li> </ol> <p>On subsequent API calls from the command-line the PigeonHole-issued token is added in the <code>Authorization: Bearer</code> HTTP header.</p>"},{"location":"documentation/configuration/authentication/#protocol-openid-connect","title":"Protocol - OpenID Connect","text":"<p>SAML2.0 will not be supported as the majority of Identity Providers support the modern OpenID Connect (OAuth2) protocol.</p>"},{"location":"documentation/configuration/authentication/#supported-identity-providers","title":"Supported Identity Providers","text":""},{"location":"documentation/configuration/authentication/#azuremicrosoft-default-provider","title":"Azure/Microsoft - Default provider","text":"<p>A global Azure AD application exists with basic permissions such that companies do not have to pre-authorize the Azure AD application.</p> <p>This means users do not need to worry about having an Azure global administrator of the Azure tenancy to approve the app. Users can login with basic OAuth scopes.</p> <p>To login with Azure/Microsoft as the Identity Provider, run: <pre><code>pigeonhole login azure\n</code></pre> or more simply: <pre><code>pigeonhole login\n</code></pre></p> <p>Missing Identity Provider?</p> <p>Vote for your Identity Provider to be prioritised on the [FEATURE REQUEST] Identity Provider GitHub issue</p>"},{"location":"documentation/configuration/overview/","title":"Configuration Overview","text":"<p>All command-line configuration is stored in a yaml file under your home directory: <code>$HOME/.pigeonhole/config.yaml</code>.</p> <p>Over time there will be server-side configuration that will be included in the issued JWT token.overtime</p>"},{"location":"documentation/configuration/overview/#command-line-configuration","title":"Command-line Configuration","text":"Parameter \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Description Default \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <code>api.base_url</code> The base Url the cli will call to. This can be overridden for development or for the future self-hosted implementations <code>https://api.pigeono.io</code> <code>api.login_url</code> Future proofing for self-hosted feature <code>https://api.pigeono.io/sso/azure/login</code> <code>auth.provider</code> The default provider the cli will use <code>azure</code> <code>auth.token</code> The JWT token issued by PigeonHole API. Useful for development/debugging purposes <code>eyJhbGciOiJIUzI1NiIsI....</code> <code>output.format</code> Resource object output will be formatted as per this value. Supports <code>json</code>, <code>yaml</code>, <code>tsv</code> <code>yaml</code> <code>output.logging.level</code> Verbosity of logging information <code>info</code>"},{"location":"documentation/configuration/overview/#server-side-configuration","title":"Server-side Configuration","text":"<p>There is no server-side configuration available at present. With the continued development, configurable features will be added over time, such as those on the current Roadmaps:</p> <ul> <li>Enabling the ability to receive files via web-browser</li> <li>Restriting sending to non-registered users</li> <li>Restricting file sizes</li> </ul>"},{"location":"keys/manage/","title":"Manage","text":""},{"location":"keys/manage/#general-help","title":"General Help","text":"<p>General help is made available in the cli tool itself</p> <pre><code>pigeonhole help\n</code></pre>"},{"location":"keys/manage/#send-a-secret","title":"Send a Secret","text":"<p>Sending secrets is super easy.</p> <pre><code>    brew tap planesailingio/pigeonhole\n    brew install pigeonhole\n</code></pre>"},{"location":"keys/manage/#list-secrets","title":"List Secrets","text":""},{"location":"pricing/pricing/","title":"Sponsorship &amp; Pricing Page","text":"Plan Price Features Standard Cloud Completely Free** but it would be great to spread the word \u2713 Single Sign-On\u2713 API Access \u2713 Default 100MB limit*\u2713 No Quota Limits**   \u2713 SLA \ud83d\udd25 Pro Become a Github SponsorBuy me a Beer \ud83c\udf7a \u2713 Bug &amp; Feature Prioritisation\u2713 Direct access to development team (Teams and Slack)\u2713 Default 10GB Limit*\u2713 Profesional mentoring for either yourself or your project Enterprise Get In Touch \u2713 Decicated deployment in your environment\u2713 Everything in Pro\u2713 Unlimited Size Limits\u2713 Access to self-hosted material\u2713 Deployment Tools <p>'''     *If you need the file size increased contact us support@pigeono.io with a quick note as to the reason and we'll take a look.</p> <pre><code>**You can send as many secrets as you want. Note that PigeonHole reserves the right to introduce limits should there be an abuse of the service\n</code></pre>"},{"location":"secrets/keeping-secrets-safe/","title":"Unlocking Trust: How GPG &amp; OpenPGP Power PigeonHole's Zero-Trust Security","text":"<p>When you send something sensitive online \u2014 whether it's a confidential contract, login credentials, or an API key \u2014 there's an unspoken moment of trust. You rely on the platform, the transport method, and the storage system to protect your data from prying eyes. But what if you couldn't fully trust any of those layers?</p> <p>PigeonHole takes a Zero Trust approach. We want your data to be safe even if you don't trust the internet.</p> <p>This radical level of security is made possible by leveraging the power of GPG and the OpenPGP standard.</p>"},{"location":"secrets/keeping-secrets-safe/#why-traditional-encryption-isnt-enough","title":"Why Traditional Encryption Isn't Enough","text":"<p>Most file sharing or secret management tools encrypt your data during transmission and while it sits on their servers. This protects against casual snooping and many common threats.</p> <p>However, those services still hold the keys \u2014 literally. They manage your encryption keys behind the scenes, which means:</p> <ul> <li>If their infrastructure is compromised, your secrets can be exposed.  </li> <li>They may be legally compelled to hand over data or keys.  </li> <li>Human error or misconfiguration can accidentally leak sensitive information.</li> </ul> <p>In essence, the \u201ctrusted\u201d provider can become the weakest link in your security chain.</p>"},{"location":"secrets/keeping-secrets-safe/#what-is-openpgp-and-why-does-it-matter","title":"What Is OpenPGP and Why Does It Matter?","text":"<p>OpenPGP is an open, well-established standard designed to protect digital communication and data. It defines how encryption, decryption, and digital signatures work together to secure information.</p> <p>GPG (GNU Privacy Guard) is the free, open-source implementation of OpenPGP. It's trusted worldwide by privacy advocates, journalists, software developers, and governments to keep communications confidential and verifiable.</p> <p>Here's the core of how it works:</p> <ul> <li>You generate a key pair: a public key and a private key.  </li> <li>The public key is shared openly and used to encrypt messages or files.  </li> <li>The private key remains secret with you, used to decrypt what's been encrypted with your public key.  </li> <li>You can also digitally sign messages with your private key to prove authenticity.</li> </ul> <p>This setup means that only you can read messages encrypted with your public key, ensuring true end-to-end security.</p>"},{"location":"secrets/keeping-secrets-safe/#how-pigeonhole-harnesses-gpg-openpgp","title":"How PigeonHole Harnesses GPG &amp; OpenPGP","text":"<p>At PigeonHole, we integrate GPG seamlessly into the user experience so you don't have to become a crypto expert to benefit from strong encryption.</p> <ul> <li>Every user seamlessly registers a public key with PigeonHole</li> <li>When you send a secret, your client software encrypts it locally using the recipient's public key.  </li> <li>The encrypted data is then stored securely on PigeonHole servers \u2014 but without access to any private keys, no one can decrypt it with the level of crypto tuning we put into the encryption.  </li> <li>When the recipient wants to retrieve the secret, they use their private key locally to decrypt it.</li> </ul> <p>'''tip     The private keys never leave your machines!</p>"},{"location":"secrets/keeping-secrets-safe/#why-this-level-of-security-matters","title":"Why This Level of Security Matters","text":"<p>By building on GPG and OpenPGP, PigeonHole achieves:</p> <ul> <li>True end-to-end encryption where data is never accessible in plaintext to intermediaries.  </li> <li>A zero-trust architecture, meaning you don't have to trust PigeonHole to keep your secrets safe \u2014 mathematically, it's impossible for us to decrypt your data.  </li> <li>Cryptographic proof that your data has not been altered or tampered with, thanks to digital signatures - think built in checksums!  </li> <li>Flexibility to securely share secrets with users whether or not they've set up their keys yet.</li> </ul>"},{"location":"secrets/keeping-secrets-safe/#the-bigger-picture-privacy-by-design","title":"The Bigger Picture: Privacy by Design","text":"<p>PigeonHole's use of GPG and OpenPGP aligns with modern privacy principles:</p> <ul> <li>Minimal trust assumptions \u2014 trust the math, not the platform.  </li> <li>Separation of duties \u2014 encryption keys are controlled by users, not the service provider.  </li> <li>Transparency \u2014 open standards and open-source software underpin the security model.</li> </ul> <p>This gives you the confidence that your most sensitive secrets stay just that \u2014 yours.</p>"},{"location":"secrets/keeping-secrets-safe/#in-summary","title":"In Summary","text":"<p>GPG and OpenPGP aren't just complex crypto acronyms; they are the foundation of secure, verifiable communication trusted globally.  </p> <p>PigeonHole brings these powerful technologies into an elegant, user-friendly platform that protects your secrets with cryptographic rigor \u2014 no compromises, no backdoors, no surprises.</p> <p>When security matters, and trust is scarce, PigeonHole makes sure your secrets truly belong to you.</p> <p>If you want to see how this looks in action, check out our documentation or try PigeonHole for yourself today. Because your secrets deserve more than just trust \u2014 they deserve proof.</p>"},{"location":"secrets/manage/","title":"Managing Secrets","text":"<p>General help with parameters are made available in the cli tool itself as these will change over time with new features being added.   There are also handy aliases to help making using PigeonHole that little bit quicker.</p> <pre><code>pigeonhole help\n</code></pre>"},{"location":"secrets/manage/#send-a-secret","title":"Send a Secret","text":"<p>Sending secrets is super easy.</p>"},{"location":"secrets/manage/#sending-via-file-path","title":"Sending via File Path","text":"<pre><code>pigeonhole secrets send --recipient recipient@domain.com --filepath ./myfile\n</code></pre>"},{"location":"secrets/manage/#sending-via-stdin","title":"Sending via StdIn","text":"<pre><code>echo \"Some helpful output\" | pigeonhole secrets send --recipient recipient@domain.com\n</code></pre> <p>Secret Send Alias</p> <p>Sending secrets can be shortened using <code>pigeonhole s s</code> e.g. <pre><code>pigeonhole s s -r recipient@domain.com -f ./myfile\n</code></pre></p>"},{"location":"secrets/manage/#list-secrets","title":"List Secrets","text":"<pre><code>pigeonhole secrets send --recipient recipient@domain.com\n</code></pre> <p>Secret List Alias</p> <p>Listing secrets can be shortened using <code>pigeonhole s ls</code> or <code>pigeonhole s l</code> e.g. ```</p> <p>pigeonhole s ls     ```</p>"},{"location":"secrets/manage/#download-secrets","title":"Download Secrets","text":"<p>Find the secret reference you want to retrieve and decrypt using the <code>secret list</code> command then; <pre><code>pigeonhole secrets get --reference &lt;reference&gt;\n</code></pre></p> <p>Disappearing Secrets</p> <p>By default secrets you download will automatically be deleted from the PigeonHole service. To retain the secret in order to download them multiple times or at a future date add the <code>--keep</code> flag.</p> <p>Secret Download Alias</p> <p>Downloading secrets can be shortened using <code>pigeonhole s g</code> or <code>pigeonhole s g</code> e.g. <pre><code>pigeonhole s g -r &lt;reference&gt;\n</code></pre></p>"},{"location":"secrets/manage/#deleting-secrets","title":"Deleting Secrets","text":"<p>Find the secret reference you want to retrieve and decrypt using the <code>secret list</code> command then; <pre><code>pigeonhole secrets get --reference &lt;reference&gt;\n</code></pre></p> <p>Secret Download Alias</p> <p>Downloading secrets can be shortened using <code>pigeonhole s g</code> or <code>pigeonhole s g</code> e.g. <pre><code>pigeonhole s g -r &lt;reference&gt;\n</code></pre></p>"}]}